from graph import Graph, Node
from uninformed import Breadth_First, Bidirectional, Depth_First

graph = Graph(biDirectional=False)
nodeS = graph.AddNode("S")
nodeA = graph.AddNode("A")
nodeB = graph.AddNode("B")
nodeC = graph.AddNode("C")
nodeD = graph.AddNode("D")
nodeE = graph.AddNode("E")
nodeF = graph.AddNode("F")
nodeG = graph.AddNode("G")
nodeH = graph.AddNode("H")
nodeI = graph.AddNode("I")
nodeK = graph.AddNode("K")
graph.AddEdge(nodeS, nodeA)
graph.AddEdge(nodeS, nodeB)
graph.AddEdge(nodeA, nodeC)
graph.AddEdge(nodeA, nodeD)
graph.AddEdge(nodeB, nodeG)
graph.AddEdge(nodeB, nodeH)
graph.AddEdge(nodeG, nodeI)
graph.AddEdge(nodeC, nodeE)
graph.AddEdge(nodeC, nodeF)
graph.AddEdge(nodeE, nodeK)
bfs = Breadth_First(graph)
bfs.Represent(nodeS)
result = bfs.Search(nodeS, "K")
print('-'.join(map(lambda x:x.Data, result)))
dfs = Depth_First(graph)
dfs.Represent(nodeS)
result = dfs.Search(nodeS, "K")
print('-'.join(map(lambda x:x.Data, result)))

